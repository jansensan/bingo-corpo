{"mappings":"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","sources":["<anon>","src/scripts/bingo.js"],"sourcesContent":["// constants\nconst $0d8135e28b98d955$var$FR = \"fr\";\nconst $0d8135e28b98d955$var$EN = \"en\";\nconst $0d8135e28b98d955$var$NUM_COLS = 5;\nconst $0d8135e28b98d955$var$NUM_ROWS = 5;\nconst $0d8135e28b98d955$var$NUM_CELLS = $0d8135e28b98d955$var$NUM_COLS * $0d8135e28b98d955$var$NUM_ROWS;\nconst $0d8135e28b98d955$var$DISABLED = \"disabled\";\nconst $0d8135e28b98d955$var$SELECTED = \"aria-selected\";\nconst $0d8135e28b98d955$var$BingoTypes = {\n    ROW: \"row\",\n    COLUMN: \"column\",\n    DIAGONAL: \"diagonal\"\n};\n// variables\nlet $0d8135e28b98d955$var$lang = \"\";\nlet $0d8135e28b98d955$var$terms = [];\nlet $0d8135e28b98d955$var$rows = []; //Â contains buttons\n// dom elements\nlet $0d8135e28b98d955$var$bingoCard;\nlet $0d8135e28b98d955$var$bingoDialog;\nlet $0d8135e28b98d955$var$veil;\nlet $0d8135e28b98d955$var$restartGameButton;\n// auto init\n$0d8135e28b98d955$var$initBingo();\n// methods definition\nfunction $0d8135e28b98d955$var$initBingo() {\n    $0d8135e28b98d955$var$lang = document.documentElement.lang;\n    $0d8135e28b98d955$var$terms = $0d8135e28b98d955$var$parseData();\n    $0d8135e28b98d955$var$getDOMElements();\n    $0d8135e28b98d955$var$addButtons($0d8135e28b98d955$var$terms);\n}\nfunction $0d8135e28b98d955$var$getDOMElements() {\n    $0d8135e28b98d955$var$bingoCard = document.getElementById(\"bingoCard\");\n    $0d8135e28b98d955$var$bingoDialog = document.getElementById(\"bingoDialog\");\n    $0d8135e28b98d955$var$veil = document.getElementById(\"veil\");\n    $0d8135e28b98d955$var$restartGameButton = document.getElementById(\"restartGameButton\");\n}\n// data management\nfunction $0d8135e28b98d955$var$parseData() {\n    const selectedTerms = [];\n    let urn = $0d8135e28b98d955$var$copyData();\n    for(let i = 0; i < $0d8135e28b98d955$var$NUM_CELLS; i++){\n        const numItemsUrn = urn.length;\n        const indexToPluck = Math.floor(Math.random() * numItemsUrn);\n        const pluckedItem = urn[indexToPluck];\n        selectedTerms.push(pluckedItem);\n        urn.splice(indexToPluck, 1);\n    }\n    return selectedTerms;\n}\nfunction $0d8135e28b98d955$var$getGameScope() {\n    const currentUrl = new URL(window.location.href);\n    const searchParams = new URLSearchParams(currentUrl.searchParams);\n    let scope;\n    if ($0d8135e28b98d955$var$lang === $0d8135e28b98d955$var$FR) {\n        const scopeFR = searchParams.get(\"sujets\");\n        if (scopeFR) scope = scopeFR.split(\",\");\n    } else if ($0d8135e28b98d955$var$lang === $0d8135e28b98d955$var$EN) {\n        const scopeEN = searchParams.get(\"scope\");\n        if (scopeEN) scope = scopeEN.split(\",\");\n    }\n    return scope;\n}\nfunction $0d8135e28b98d955$var$copyData() {\n    const scope = $0d8135e28b98d955$var$getGameScope();\n    let copy = [];\n    if (scope && scope.includes(\"marketing\") || scope === undefined) {\n        const marketing = BINGO_DATA.fr.marketing.slice();\n        copy.push(...marketing.slice());\n    }\n    if (scope && scope.includes(\"design\")) {\n        const design = BINGO_DATA.fr.design.slice();\n        design.forEach((element)=>{\n            if (!copy.includes(element)) copy.push(element);\n        });\n    }\n    // tech\n    if (scope && scope.includes(\"tech\")) {\n        const tech = BINGO_DATA.fr.tech.slice();\n        tech.forEach((element)=>{\n            if (!copy.includes(element)) copy.push(element);\n        });\n    }\n    return copy;\n}\n// card creation\nfunction $0d8135e28b98d955$var$addButtons(terms) {\n    let index = 0;\n    let rowId = -1;\n    terms.forEach((term)=>{\n        // manage row\n        const newRowId = Math.floor(index / $0d8135e28b98d955$var$NUM_COLS);\n        if (newRowId !== rowId) {\n            rowId = newRowId;\n            const row = document.createElement(\"div\");\n            row.classList.add(\"tile-row\");\n            row.dataset.rowId = rowId;\n            $0d8135e28b98d955$var$rows.push(row);\n        }\n        const tile = $0d8135e28b98d955$var$createTile({\n            index: index,\n            term: term\n        });\n        tile.addEventListener(\"click\", $0d8135e28b98d955$var$onTileClicked);\n        $0d8135e28b98d955$var$rows[rowId].appendChild(tile);\n        index++;\n    });\n    // add rows\n    $0d8135e28b98d955$var$rows.forEach((row)=>{\n        $0d8135e28b98d955$var$bingoCard.appendChild(row);\n    });\n}\nfunction $0d8135e28b98d955$var$createTile(options) {\n    const { index: index, term: term } = options;\n    const tile = document.createElement(\"button\");\n    tile.type = \"button\";\n    tile.innerText = term;\n    tile.classList.add(\"bingo-tile\");\n    const colId = index % $0d8135e28b98d955$var$NUM_COLS;\n    const rowId = Math.floor(index / $0d8135e28b98d955$var$NUM_COLS);\n    tile.dataset.col = colId;\n    tile.dataset.row = rowId;\n    tile.setAttribute($0d8135e28b98d955$var$SELECTED, false);\n    const isEven = index % 2 === 0;\n    if (isEven) tile.classList.add(\"even\");\n    else tile.classList.add(\"odd\");\n    return tile;\n}\nfunction $0d8135e28b98d955$var$onTileClicked(event) {\n    const tile = event.target;\n    const isTileSelected = $0d8135e28b98d955$var$isTrue(tile.getAttribute($0d8135e28b98d955$var$SELECTED));\n    const newValue = !isTileSelected;\n    tile.setAttribute($0d8135e28b98d955$var$SELECTED, newValue);\n    const response = $0d8135e28b98d955$var$checkForBingo();\n    if (response.bingo) $0d8135e28b98d955$var$showGameComplete();\n}\n// game flow\nfunction $0d8135e28b98d955$var$checkForBingo() {\n    const numTiles = 5;\n    const colsValues = [\n        [],\n        [],\n        [],\n        [],\n        []\n    ];\n    let response = {\n        bingo: false,\n        type: null\n    };\n    // go through rows\n    let rowIndex = 0;\n    $0d8135e28b98d955$var$rows.forEach((row)=>{\n        const rowValues = [];\n        const tiles = row.getElementsByClassName(\"bingo-tile\");\n        for(let i = 0; i < numTiles; i++){\n            // save tile value in array for row\n            const tile = tiles[i];\n            rowValues.push($0d8135e28b98d955$var$isTileElementStamped(tile));\n            // save tile value in array for column, to check later\n            colsValues[i][rowIndex] = $0d8135e28b98d955$var$isTileElementStamped(tile);\n        }\n        // check for bingo at row\n        if (rowValues.every($0d8135e28b98d955$var$isItemTrue)) {\n            response.bingo = true;\n            response.type = $0d8135e28b98d955$var$BingoTypes.ROW;\n        }\n        rowIndex++;\n    });\n    if (response.bingo) return response;\n    // go through columns\n    colsValues.forEach((values)=>{\n        // check for bingo at col\n        if (values.every($0d8135e28b98d955$var$isItemTrue)) {\n            response.bingo = true;\n            response.type = $0d8135e28b98d955$var$BingoTypes.COLUMN;\n        }\n    });\n    if (response.bingo) return response;\n    // check diagonals - top-left â bottom right\n    const diagonal1 = [];\n    rowIndex = 0;\n    $0d8135e28b98d955$var$rows.forEach((row)=>{\n        const tiles = row.getElementsByClassName(\"bingo-tile\");\n        diagonal1.push($0d8135e28b98d955$var$isTileElementStamped(tiles[rowIndex]));\n        rowIndex++;\n    });\n    if (diagonal1.every($0d8135e28b98d955$var$isItemTrue)) {\n        response.bingo = true;\n        response.type = $0d8135e28b98d955$var$BingoTypes.DIAGONAL;\n    }\n    if (response.bingo) return response;\n    // check diagonals - top-right â bottom left\n    const diagonal2 = [];\n    rowIndex = 0;\n    $0d8135e28b98d955$var$rows.forEach((row)=>{\n        const tiles = row.getElementsByClassName(\"bingo-tile\");\n        const tileIndex = numTiles - rowIndex - 1;\n        diagonal2.push($0d8135e28b98d955$var$isTileElementStamped(tiles[tileIndex]));\n        rowIndex++;\n    });\n    if (diagonal2.every($0d8135e28b98d955$var$isItemTrue)) {\n        response.bingo = true;\n        response.type = $0d8135e28b98d955$var$BingoTypes.DIAGONAL;\n    }\n    if (response.bingo) return response;\n    // no bingo...\n    return response;\n}\nfunction $0d8135e28b98d955$var$showGameComplete() {\n    $0d8135e28b98d955$var$veil.classList.remove(\"hidden\");\n    $0d8135e28b98d955$var$bingoDialog.showModal();\n    $0d8135e28b98d955$var$veil.addEventListener(\"click\", $0d8135e28b98d955$var$onDismissDialog);\n    $0d8135e28b98d955$var$restartGameButton.addEventListener(\"click\", $0d8135e28b98d955$var$onDismissDialog);\n}\nfunction $0d8135e28b98d955$var$onDismissDialog() {\n    $0d8135e28b98d955$var$restartGame();\n}\nfunction $0d8135e28b98d955$var$restartGame() {\n    location.reload();\n}\n// utils\nfunction $0d8135e28b98d955$var$isTileElementStamped(tile) {\n    if (!tile) return false;\n    return $0d8135e28b98d955$var$isTrue(tile.getAttribute($0d8135e28b98d955$var$SELECTED));\n}\nfunction $0d8135e28b98d955$var$isItemTrue(value) {\n    return value === true;\n}\nfunction $0d8135e28b98d955$var$isTrue(value) {\n    const valueType = typeof value;\n    if (valueType === \"string\") return value.toLowerCase() === \"true\";\n    else if (valueType === \"boolean\") return value === true;\n}\n\n\n//# sourceMappingURL=bingo.js.map\n","// constants\nconst FR = 'fr';\nconst EN = 'en';\n\nconst NUM_COLS = 5;\nconst NUM_ROWS = 5;\nconst NUM_CELLS = NUM_COLS * NUM_ROWS;\n\nconst DISABLED = 'disabled';\nconst SELECTED = 'aria-selected';\n\nconst BingoTypes = {\n  ROW: 'row',\n  COLUMN: 'column',\n  DIAGONAL: 'diagonal',\n};\n\n// variables\nlet lang = '';\nlet terms = [];\nlet rows = []; //Â contains buttons\n\n\n// dom elements\nlet bingoCard;\n\nlet bingoDialog;\nlet veil;\nlet restartGameButton;\n\n\n// auto init\ninitBingo();\n\n\n// methods definition\nfunction initBingo() {\n  lang = document.documentElement.lang\n  terms = parseData();\n  getDOMElements();\n  addButtons(terms);\n}\n\nfunction getDOMElements() {\n  bingoCard = document.getElementById('bingoCard');\n  bingoDialog = document.getElementById('bingoDialog');\n  veil = document.getElementById('veil');\n  restartGameButton = document.getElementById('restartGameButton');\n}\n\n\n// data management\nfunction parseData() {\n  const selectedTerms = []\n\n  let urn = copyData();\n  for (let i = 0; i < NUM_CELLS; i++) {\n    const numItemsUrn = urn.length;\n    const indexToPluck = Math.floor(Math.random() * numItemsUrn);\n    const pluckedItem = urn[indexToPluck];\n    selectedTerms.push(pluckedItem);\n    urn.splice(indexToPluck, 1);\n  }\n\n  return selectedTerms;\n}\n\nfunction getGameScope() {\n  const currentUrl = new URL(window.location.href);\n  const searchParams = new URLSearchParams(currentUrl.searchParams);\n\n  let scope;\n  if (lang === FR) {\n    const scopeFR = searchParams.get('sujets');\n    if (scopeFR) {\n      scope = scopeFR.split(',');\n    }\n\n  } else if (lang === EN) {\n    const scopeEN = searchParams.get('scope');\n    if (scopeEN) {\n      scope = scopeEN.split(',');\n    }\n  }\n\n  return scope;\n}\n\nfunction copyData() {\n  const scope = getGameScope();\n\n  let copy = [];\n\n  if (\n    (scope && scope.includes('marketing'))\n    || scope === undefined\n  ) {\n    const marketing = BINGO_DATA.fr.marketing.slice();\n    copy.push(...marketing.slice());\n  }\n\n  if (scope && scope.includes('design')) {\n    const design = BINGO_DATA.fr.design.slice();\n    design.forEach(element => {\n      if (!copy.includes(element)) {\n        copy.push(element);\n      }\n    });\n  }\n\n  // tech\n  if (scope && scope.includes('tech')) {\n    const tech = BINGO_DATA.fr.tech.slice();\n    tech.forEach(element => {\n      if (!copy.includes(element)) {\n        copy.push(element);\n      }\n    });\n  }\n\n  return copy;\n}\n\n\n// card creation\nfunction addButtons(terms) {\n  let index = 0;\n  let rowId = -1;\n\n  terms.forEach(term => {\n    // manage row\n    const newRowId = Math.floor(index / NUM_COLS);\n    if (newRowId !== rowId) {\n      rowId = newRowId;\n\n      const row = document.createElement('div');\n      row.classList.add('tile-row');\n      row.dataset.rowId = rowId;\n\n      rows.push(row);\n    }\n\n    const tile = createTile({ index, term });\n    tile.addEventListener('click', onTileClicked);\n    rows[rowId].appendChild(tile);\n\n    index++;\n  });\n\n  // add rows\n\n  rows.forEach(row => {\n    bingoCard.appendChild(row);\n  });\n}\n\nfunction createTile(options) {\n  const { index, term } = options;\n\n  const tile = document.createElement('button');\n  tile.type = 'button';\n  tile.innerText = term;\n  tile.classList.add('bingo-tile');\n\n  const colId = index % NUM_COLS;\n  const rowId = Math.floor(index / NUM_COLS);\n  tile.dataset.col = colId;\n  tile.dataset.row = rowId;\n  tile.setAttribute(SELECTED, false);\n\n  const isEven = index % 2 === 0;\n  if (isEven) {\n    tile.classList.add('even');\n  } else {\n    tile.classList.add('odd');\n  }\n\n  return tile;\n}\n\nfunction onTileClicked(event) {\n  const tile = event.target;\n\n  const isTileSelected = isTrue(tile.getAttribute(SELECTED));\n  const newValue = !isTileSelected;\n  tile.setAttribute(SELECTED, newValue);\n\n  const response = checkForBingo();\n  if (response.bingo) {\n    showGameComplete();\n  }\n}\n\n\n// game flow\nfunction checkForBingo() {\n  const numTiles = 5;\n  const colsValues = [[], [], [], [], []];\n\n  let response = {\n    bingo: false,\n    type: null,\n  };\n\n  // go through rows\n  let rowIndex = 0;\n  rows.forEach(row => {\n    const rowValues = [];\n    const tiles = row.getElementsByClassName('bingo-tile');\n    for (let i = 0; i < numTiles; i++) {\n      // save tile value in array for row\n      const tile = tiles[i];\n      rowValues.push(isTileElementStamped(tile));\n\n      // save tile value in array for column, to check later\n      colsValues[i][rowIndex] = isTileElementStamped(tile);\n    }\n\n    // check for bingo at row\n    if (rowValues.every(isItemTrue)) {\n      response.bingo = true;\n      response.type = BingoTypes.ROW;\n    }\n\n    rowIndex++;\n  });\n\n  if (response.bingo) {\n    return response;\n  }\n\n\n  // go through columns\n  colsValues.forEach(values => {\n    // check for bingo at col\n    if (values.every(isItemTrue)) {\n      response.bingo = true;\n      response.type = BingoTypes.COLUMN;\n    }\n  });\n\n  if (response.bingo) {\n    return response;\n  }\n\n\n  // check diagonals - top-left â bottom right\n  const diagonal1 = [];\n  rowIndex = 0;\n  rows.forEach(row => {\n    const tiles = row.getElementsByClassName('bingo-tile');\n    diagonal1.push(isTileElementStamped(tiles[rowIndex]));\n    rowIndex++;\n  });\n\n  if (diagonal1.every(isItemTrue)) {\n    response.bingo = true;\n    response.type = BingoTypes.DIAGONAL;\n  }\n\n  if (response.bingo) {\n    return response;\n  }\n\n\n  // check diagonals - top-right â bottom left\n  const diagonal2 = [];\n  rowIndex = 0;\n  rows.forEach(row => {\n    const tiles = row.getElementsByClassName('bingo-tile');\n    const tileIndex = numTiles - rowIndex - 1;\n    diagonal2.push(isTileElementStamped(tiles[tileIndex]));\n    rowIndex++;\n  });\n\n  if (diagonal2.every(isItemTrue)) {\n    response.bingo = true;\n    response.type = BingoTypes.DIAGONAL;\n  }\n\n  if (response.bingo) {\n    return response;\n  }\n\n\n  // no bingo...\n  return response;\n}\n\nfunction showGameComplete() {\n  veil.classList.remove('hidden');\n  bingoDialog.showModal();\n\n  veil.addEventListener('click', onDismissDialog);\n  restartGameButton.addEventListener('click', onDismissDialog);\n}\n\nfunction onDismissDialog() {\n  restartGame();\n}\n\nfunction restartGame() {\n  location.reload();\n}\n\n\n// utils\nfunction isTileElementStamped(tile) {\n  if (!tile) {\n    return false;\n  }\n  return isTrue(tile.getAttribute(SELECTED));\n}\n\nfunction isItemTrue(value) {\n  return value === true;\n}\n\nfunction isTrue(value) {\n  const valueType = typeof value;\n\n  if (valueType === 'string') {\n    return value.toLowerCase() === 'true';\n  } else if (valueType === 'boolean') {\n    return value === true;\n  } else {\n    false;\n  }\n}\n"],"names":["$0d8135e28b98d955$var$bingoCard","$0d8135e28b98d955$var$bingoDialog","$0d8135e28b98d955$var$veil","$0d8135e28b98d955$var$restartGameButton","index","rowId","$0d8135e28b98d955$var$SELECTED","$0d8135e28b98d955$var$BingoTypes","ROW","COLUMN","DIAGONAL","$0d8135e28b98d955$var$lang","$0d8135e28b98d955$var$terms","$0d8135e28b98d955$var$rows","$0d8135e28b98d955$var$onTileClicked","event","tile","target","isTileSelected","$0d8135e28b98d955$var$isTrue","getAttribute","setAttribute","response","$0d8135e28b98d955$var$checkForBingo","colsValues","bingo","type","rowIndex","forEach","row","rowValues","tiles","getElementsByClassName","i","push","$0d8135e28b98d955$var$isTileElementStamped","every","$0d8135e28b98d955$var$isItemTrue","values","diagonal1","diagonal2","tileIndex","numTiles","classList","remove","showModal","addEventListener","$0d8135e28b98d955$var$onDismissDialog","location","reload","value","valueType","toLowerCase","document","documentElement","lang","$0d8135e28b98d955$var$parseData","selectedTerms","urn","$0d8135e28b98d955$var$copyData","scope","$0d8135e28b98d955$var$getGameScope","searchParams","URLSearchParams","currentUrl","URL","window","href","scopeFR","get","split","scopeEN","copy","includes","undefined","marketing","BINGO_DATA","fr","slice","design","element","tech","$0d8135e28b98d955$var$NUM_COLS","indexToPluck","Math","floor","random","length","pluckedItem","splice","getElementById","terms","term","newRowId","createElement","add","dataset","$0d8135e28b98d955$var$createTile","options","innerText","col","appendChild"],"version":3,"file":"bingo.js.map","sourceRoot":"../../"}