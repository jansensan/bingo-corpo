{"mappings":"ICYI,EALA,EACA,EAuCE,EACA,EAzCF,EAAQ,EAAE,CACV,EAAO,EAAE,CAaX,EAAQ,AAMV,WACE,IAAM,EAAgB,EAAE,CAEpB,EAAM,AAqEZ,WACE,IAAM,EAAS,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,GACnC,EAAY,WAAW,EAAE,CAAC,SAAS,CAAC,KAAK,GAE3C,EAAO,EAAO,KAAK,GAOvB,OANA,EAAU,OAAO,CAAC,AAAA,IACX,EAAK,QAAQ,CAAC,IACjB,EAAK,IAAI,CAAC,EAEd,GAEO,CACT,IAhFE,IAAK,IAAI,EAAI,EAAG,EA5BA,GA4Be,IAAK,CAElC,IAAM,EAAe,KAAK,KAAK,CAAC,KAAK,MAAM,GADvB,EAAI,MAAM,EAExB,EAAc,CAAG,CAAC,EAAa,CACrC,EAAc,IAAI,CAAC,GACnB,EAAI,MAAM,CAAC,EAAc,EAC3B,CAEA,OAAO,CACT,IAGE,EAAY,SAAS,cAAc,CAAC,aAIhC,EAAQ,EACR,EAAQ,GAEZ,AA1BW,EA0BL,OAAO,CAAC,AAAA,IAEZ,IAAM,EAAW,KAAK,KAAK,CAAC,EAnDf,GAoDb,GAAI,IAAa,EAAO,CACtB,EAAQ,EAER,IAAM,EAAM,SAAS,aAAa,CAAC,OACnC,EAAI,SAAS,CAAC,GAAG,CAAC,YAClB,EAAI,OAAO,CAAC,KAAK,CAAG,EAEpB,EAAK,IAAI,CAAC,EACZ,CAEA,IAAM,EAAO,AAajB,SAAoB,CAAO,EACzB,GAAM,CAAA,MAAE,CAAK,CAAA,KAAE,CAAI,CAAE,CAAG,EAElB,EAAO,SAAS,aAAa,CAAC,SACpC,CAAA,EAAK,IAAI,CAAG,SACZ,EAAK,SAAS,CAAG,EACjB,EAAK,SAAS,CAAC,GAAG,CAAC,cAGnB,IAAM,EAAQ,KAAK,KAAK,CAAC,EApFV,UAqFf,EAAK,OAAO,CAAC,GAAG,CAFF,EAnFC,EAsFf,EAAK,OAAO,CAAC,GAAG,CAAG,EAEJ,EAAQ,GAAM,EAE3B,EAAK,SAAS,CAAC,GAAG,CAAC,QAEnB,EAAK,SAAS,CAAC,GAAG,CAAC,OAGd,CACT,EAlC4B,CAAE,MAAA,EAAO,KAAA,CAAK,GACtC,CAAI,CAAC,EAAM,CAAC,WAAW,CAAC,GAExB,GACF,GAIA,EAAK,OAAO,CAAC,AAAA,IACX,EAAU,WAAW,CAAC,EACxB","sources":["<anon>","src/scripts/bingo.js"],"sourcesContent":["(() => {\n// constants\nconst $a6f33b9b331fe684$var$NUM_COLS = 5;\nconst $a6f33b9b331fe684$var$NUM_ROWS = 5;\nconst $a6f33b9b331fe684$var$NUM_CELLS = $a6f33b9b331fe684$var$NUM_COLS * $a6f33b9b331fe684$var$NUM_ROWS;\n// variables\nlet $a6f33b9b331fe684$var$terms = [];\nlet $a6f33b9b331fe684$var$rows = []; // contains buttons\n// dom elements\nlet $a6f33b9b331fe684$var$bingoCard;\n// auto init\n$a6f33b9b331fe684$var$initBingo();\n// methods definition\nfunction $a6f33b9b331fe684$var$initBingo() {\n    $a6f33b9b331fe684$var$terms = $a6f33b9b331fe684$var$parseData();\n    $a6f33b9b331fe684$var$getDOMElements();\n    $a6f33b9b331fe684$var$addButtons($a6f33b9b331fe684$var$terms);\n}\nfunction $a6f33b9b331fe684$var$parseData() {\n    const selectedTerms = [];\n    let urn = $a6f33b9b331fe684$var$copyData();\n    for(let i = 0; i < $a6f33b9b331fe684$var$NUM_CELLS; i++){\n        const numItemsUrn = urn.length;\n        const indexToPluck = Math.floor(Math.random() * numItemsUrn);\n        const pluckedItem = urn[indexToPluck];\n        selectedTerms.push(pluckedItem);\n        urn.splice(indexToPluck, 1);\n    }\n    return selectedTerms;\n}\nfunction $a6f33b9b331fe684$var$getDOMElements() {\n    $a6f33b9b331fe684$var$bingoCard = document.getElementById(\"bingoCard\");\n}\nfunction $a6f33b9b331fe684$var$addButtons(terms) {\n    let index = 0;\n    let rowId = -1;\n    terms.forEach((term)=>{\n        // manage row\n        const newRowId = Math.floor(index / $a6f33b9b331fe684$var$NUM_COLS);\n        if (newRowId !== rowId) {\n            rowId = newRowId;\n            const row = document.createElement(\"div\");\n            row.classList.add(\"tile-row\");\n            row.dataset.rowId = rowId;\n            $a6f33b9b331fe684$var$rows.push(row);\n        }\n        const tile = $a6f33b9b331fe684$var$createTile({\n            index: index,\n            term: term\n        });\n        $a6f33b9b331fe684$var$rows[rowId].appendChild(tile);\n        index++;\n    });\n    // add rows\n    $a6f33b9b331fe684$var$rows.forEach((row)=>{\n        $a6f33b9b331fe684$var$bingoCard.appendChild(row);\n    });\n}\nfunction $a6f33b9b331fe684$var$createTile(options) {\n    const { index: index, term: term } = options;\n    const tile = document.createElement(\"button\");\n    tile.type = \"button\";\n    tile.innerText = term;\n    tile.classList.add(\"bingo-tile\");\n    const colId = index % $a6f33b9b331fe684$var$NUM_COLS;\n    const rowId = Math.floor(index / $a6f33b9b331fe684$var$NUM_COLS);\n    tile.dataset.col = colId;\n    tile.dataset.row = rowId;\n    const isEven = index % 2 === 0;\n    if (isEven) tile.classList.add(\"even\");\n    else tile.classList.add(\"odd\");\n    return tile;\n}\nfunction $a6f33b9b331fe684$var$copyData() {\n    const design = BINGO_DATA.fr.design.slice();\n    const marketing = BINGO_DATA.fr.marketing.slice();\n    let copy = design.slice();\n    marketing.forEach((element)=>{\n        if (!copy.includes(element)) copy.push(element);\n    });\n    return copy;\n}\n\n})();\n//# sourceMappingURL=bingo.js.map\n","// constants\nconst NUM_COLS = 5;\nconst NUM_ROWS = 5;\nconst NUM_CELLS = NUM_COLS * NUM_ROWS;\n\n\n// variables\nlet terms = [];\nlet rows = []; // contains buttons\n\n\n// dom elements\nlet bingoCard;\n\n\n// auto init\ninitBingo();\n\n\n// methods definition\nfunction initBingo() {\n  terms = parseData();\n\n  getDOMElements();\n  addButtons(terms);\n}\n\nfunction parseData() {\n  const selectedTerms = []\n\n  let urn = copyData();\n  for (let i = 0; i < NUM_CELLS; i++) {\n    const numItemsUrn = urn.length;\n    const indexToPluck = Math.floor(Math.random() * numItemsUrn);\n    const pluckedItem = urn[indexToPluck];\n    selectedTerms.push(pluckedItem);\n    urn.splice(indexToPluck, 1);\n  }\n\n  return selectedTerms;\n}\n\nfunction getDOMElements() {\n  bingoCard = document.getElementById('bingoCard');\n}\n\nfunction addButtons(terms) {\n  let index = 0;\n  let rowId = -1;\n\n  terms.forEach(term => {\n    // manage row\n    const newRowId = Math.floor(index / NUM_COLS);\n    if (newRowId !== rowId) {\n      rowId = newRowId;\n\n      const row = document.createElement('div');\n      row.classList.add('tile-row');\n      row.dataset.rowId = rowId;\n\n      rows.push(row);\n    }\n\n    const tile = createTile({ index, term });\n    rows[rowId].appendChild(tile);\n\n    index++;\n  });\n\n  // add rows\n\n  rows.forEach(row => {\n    bingoCard.appendChild(row);\n  });\n}\n\nfunction createTile(options) {\n  const { index, term } = options;\n\n  const tile = document.createElement('button');\n  tile.type = 'button';\n  tile.innerText = term;\n  tile.classList.add('bingo-tile');\n\n  const colId = index % NUM_COLS;\n  const rowId = Math.floor(index / NUM_COLS);\n  tile.dataset.col = colId;\n  tile.dataset.row = rowId;\n\n  const isEven = index % 2 === 0;\n  if (isEven) {\n    tile.classList.add('even');\n  } else {\n    tile.classList.add('odd');\n  }\n\n  return tile;\n}\n\nfunction copyData() {\n  const design = BINGO_DATA.fr.design.slice();\n  const marketing = BINGO_DATA.fr.marketing.slice();\n\n  let copy = design.slice();\n  marketing.forEach(element => {\n    if (!copy.includes(element)) {\n      copy.push(element);\n    }\n  });\n\n  return copy;\n}"],"names":["$a6f33b9b331fe684$var$bingoCard","$a6f33b9b331fe684$var$terms","$a6f33b9b331fe684$var$rows","index","rowId","$a6f33b9b331fe684$var$parseData","selectedTerms","urn","$a6f33b9b331fe684$var$copyData","design","BINGO_DATA","fr","slice","marketing","copy","forEach","element","includes","push","i","$a6f33b9b331fe684$var$NUM_COLS","indexToPluck","Math","floor","random","length","pluckedItem","splice","document","getElementById","terms","term","newRowId","row","createElement","classList","add","dataset","tile","$a6f33b9b331fe684$var$createTile","options","type","innerText","col","appendChild"],"version":3,"file":"bingo.js.map"}